/**
 * @fileOverview Firestore Security Rules for Sahayak Savings App
 *
 * @corePhilosophy
 * This ruleset enforces a strict user-ownership model where each user has exclusive access to their own data, stored under their unique user ID.
 *
 * @dataStructure
 * - /users/{userId}/members/{memberId}: Stores member data, accessible only by the owning user.
 * - /users/{userId}/transactions/{transactionId}: Stores transaction data, accessible only by the owning user.
 * - /users/{userId}/groupSettings: Stores group settings, accessible only by the owning user.
 *
 * @keySecurityDecisions
 * - User listing is implicitly disallowed by the data structure; only data within a user's own scope is accessible.
 * - All write operations (create, update, delete) are strictly controlled via ownership checks using the `request.auth.uid`.
 * - Denormalization of group settings into member and transaction documents avoids costly `get()` operations in security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for member documents.
     * @path /users/{userId}/members/{memberId}
     * @allow (create) - Authenticated user 'user_abc' can create a new member document under their user ID: request.auth.uid == 'user_abc' and request.resource.data.id == 'user_abc'.
     * @allow (get, list, update, delete) - Authenticated user 'user_abc' can read, update, or delete their own member document: request.auth.uid == 'user_abc'.
     * @deny (create) - Authenticated user 'user_xyz' cannot create a member document under another user's ID ('user_abc'): request.auth.uid != 'user_abc'.
     * @deny (get, list, update, delete) - Authenticated user 'user_xyz' cannot access member documents under another user's ID ('user_abc'): request.auth.uid != 'user_abc'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/members/{memberId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user is the owner of the existing document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == memberId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for transaction documents.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (create) - Authenticated user 'user_abc' can create a new transaction document under their user ID: request.auth.uid == 'user_abc'.
     * @allow (get, list, update, delete) - Authenticated user 'user_abc' can read, update, or delete their own transaction document: request.auth.uid == 'user_abc'.
     * @deny (create) - Authenticated user 'user_xyz' cannot create a transaction document under another user's ID ('user_abc'): request.auth.uid != 'user_abc'.
     * @deny (get, list, update, delete) - Authenticated user 'user_xyz' cannot access transaction documents under another user's ID ('user_abc'): request.auth.uid != 'user_abc'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/transactions/{transactionId} {
       // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user is the owner of the existing document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.memberId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.memberId == resource.data.memberId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for group settings documents.
     * @path /users/{userId}/groupSettings
     * @allow (create) - Authenticated user 'user_abc' can create group settings under their user ID: request.auth.uid == 'user_abc'.
     * @allow (get, list, update, delete) - Authenticated user 'user_abc' can read, update, or delete their own group settings: request.auth.uid == 'user_abc'.
     * @deny (create) - Authenticated user 'user_xyz' cannot create group settings under another user's ID ('user_abc'): request.auth.uid != 'user_abc'.
     * @deny (get, list, update, delete) - Authenticated user 'user_xyz' cannot access group settings under another user's ID ('user_abc'): request.auth.uid != 'user_abc'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/groupSettings {
       // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user is the owner of the existing document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}