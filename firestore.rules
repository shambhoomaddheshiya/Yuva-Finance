/**
 * @fileoverview Firestore Security Rules for Sahayak Savings application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model where each user can only
 * access data associated with their own user ID. This is achieved through
 * path-based access control under the /users/{userId} collection.
 *
 * Data Structure:
 * - /users/{userId}/members/{memberId}: Stores member data, owned by the user.
 * - /users/{userId}/transactions/{transactionId}: Stores transaction data, owned by the user.
 * - /users/{userId}/groupSettings: Stores group settings, owned by the user.
 *
 * Key Security Decisions:
 * - User data is segregated under /users/{userId} to prevent cross-user access.
 * - List operations are secured via path-based ownership, allowing users to
 *   only list resources within their own user scope.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces that only the authenticated user can manage their own member data.
     * @path /users/{userId}/members/{memberId}
     * @allow (create) - User 'user123' can create a new member with memberId 'member456' if authenticated as 'user123'.
     * @allow (get, update, delete) - User 'user123' can get, update, or delete member 'member456' if authenticated as 'user123'.
     * @deny (create) - User 'user123' cannot create a new member with memberId 'member456' if not authenticated.
     * @deny (create) - User 'user123' cannot create a new member with memberId 'member456' if authenticated as a different user ('user789').
     * @deny (update, delete) - User 'user123' cannot update or delete member 'member456' if not authenticated.
     * @deny (update, delete) - User 'user123' cannot update or delete member 'member456' if authenticated as a different user ('user789').
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/members/{memberId} {
      // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user is the owner of the existing document.
      function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == memberId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces that only the authenticated user can manage their own transaction data.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (create) - User 'user123' can create a new transaction with transactionId 'txn789' if authenticated as 'user123'.
     * @allow (get, update, delete) - User 'user123' can get, update, or delete transaction 'txn789' if authenticated as 'user123'.
     * @deny (create) - User 'user123' cannot create a new transaction with transactionId 'txn789' if not authenticated.
     * @deny (create) - User 'user123' cannot create a new transaction with transactionId 'txn789' if authenticated as a different user ('user789').
     * @deny (update, delete) - User 'user123' cannot update or delete transaction 'txn789' if not authenticated.
     * @deny (update, delete) - User 'user123' cannot update or delete transaction 'txn789' if authenticated as a different user ('user789').
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/transactions/{transactionId} {
      // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user is the owner of the existing document.
      function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == transactionId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces that only the authenticated user can manage their own group settings.
     * @path /users/{userId}/groupSettings
     * @allow (create) - User 'user123' can create group settings if authenticated as 'user123'.
     * @allow (get, update, delete) - User 'user123' can get, update, or delete group settings if authenticated as 'user123'.
     * @deny (create) - User 'user123' cannot create group settings if not authenticated.
     * @deny (create) - User 'user123' cannot create group settings if authenticated as a different user ('user789').
     * @deny (update, delete) - User 'user123' cannot update or delete group settings if not authenticated.
     * @deny (update, delete) - User 'user123' cannot update or delete group settings if authenticated as a different user ('user789').
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/groupSettings {
      // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user is the owner of the existing document.
      function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}