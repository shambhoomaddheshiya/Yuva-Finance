/**
 * @fileoverview Firestore Security Rules for Sahayak Savings App
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model where each user can only
 * access data under their own user ID.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, which includes members, transactions,
 * and group settings. This ensures that each user's data is isolated from others.
 *
 * Key Security Decisions:
 * - Strict user-ownership: Only the authenticated user can create, read, update,
 *   or delete data under their /users/{userId} path.
 * - No listing of all users: The rules do not allow listing all users in the
 *   database to protect user privacy.
 * - Group settings are owned and managed by each user for their groups.
 *
 * Denormalization for Authorization:
 * To achieve authorization independence and avoid costly `get()` operations,
 * authorization-critical data is denormalized (duplicated) across documents.
 * For example, group settings might be duplicated into member and transaction documents
 * to allow security rules to be enforced without needing to fetch the group settings
 * during member or transaction creation or modification.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @return {boolean} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user ID matches, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner and the resource exists.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId)/members/$(memberId));
    }

    match /users/{userId} {
       match /members/{memberId} {
          allow read: if isOwner(userId);
          allow write: if isOwner(userId);
       }

       match /transactions/{transactionId} {
          allow read: if isOwner(userId);
          allow write: if isOwner(userId);
       }

       match /groupSettings/{settings} {
          allow get: if isOwner(userId);
          allow create: if isOwner(userId);
          allow update: if isOwner(userId);
          allow delete: if isOwner(userId);
          allow list: if false;
       }
    }
  }
}