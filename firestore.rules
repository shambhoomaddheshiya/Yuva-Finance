/**
 * @fileoverview Firestore Security Rules for Sahayak Savings application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user has a private data scope
 * under `/users/{userId}`. Only the authenticated user can access their own data.
 *
 * Data Structure:
 * - /users/{userId}/members/{memberId}: Stores member data, accessible only by the owner.
 * - /users/{userId}/transactions/{transactionId}: Stores transaction data, accessible only by the owner.
 * - /users/{userId}/groupSettings: Stores group settings, accessible only by the owner.
 *
 * Key Security Decisions:
 * - Users can only access data under their own /users/{userId} path.
 * - No public data access is allowed; all reads and writes require authentication.
 * - Data validation is limited to authorization-critical fields for prototyping speed.
 * - List operations are secure by default due to the user-scoping of data.
 *
 * Denormalization for Authorization:
 * - The rules assume that any data needed for authorization (e.g., group membership)
 *   is denormalized directly onto the documents being secured. This avoids costly `get()` calls
 *   in the security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user authentication
     * @principle Authentication Required
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the document.
     * @param {string} userId - The user ID from the path.
     * @return {bool} - True if the user ID matches the authenticated user's ID.
     * @principle Path-based Ownership
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the owner of an existing document.
     * @param {string} userId - The user ID from the path.
     * @return {bool} - True if the user ID matches the authenticated user's ID and the resource exists.
     * @principle Path-based Ownership with Existence Check
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }


    /**
     * @description Rules for the /users/{userId}/members/{memberId} collection.
     * @path /users/{userId}/members/{memberId}
     * @allow (create) - Authenticated user creates a member under their own userId.
     *           Example: request.auth.uid = "user123", path = "/users/user123/members/member456"
     * @allow (get, list, update, delete) - Authenticated user accesses their own member data.
     *           Example: request.auth.uid = "user123", path = "/users/user123/members/member456"
     * @deny (create) - Authenticated user attempts to create a member under another user's userId.
     *           Example: request.auth.uid = "user123", path = "/users/user456/members/member789"
     * @deny (get, list, update, delete) - Authenticated user attempts to access another user's member data.
     *           Example: request.auth.uid = "user123", path = "/users/user456/members/member789"
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/members/{memberId} {
      // Allow reads only if the user is signed in and is the owner of the document.
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      // Allow creation only if the user is signed in and the userId matches the authenticated user's ID.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == memberId;

      // Allow updates only if the user is signed in, is the owner of the document, and the document exists. Enforce immutability of the id field.
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;

      // Allow deletion only if the user is signed in, is the owner of the document, and the document exists.
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/transactions/{transactionId} collection.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (create) - Authenticated user creates a transaction under their own userId.
     *           Example: request.auth.uid = "user123", path = "/users/user123/transactions/transaction456"
     * @allow (get, list, update, delete) - Authenticated user accesses their own transaction data.
     *           Example: request.auth.uid = "user123", path = "/users/user123/transactions/transaction456"
     * @deny (create) - Authenticated user attempts to create a transaction under another user's userId.
     *           Example: request.auth.uid = "user123", path = "/users/user456/transactions/transaction789"
     * @deny (get, list, update, delete) - Authenticated user attempts to access another user's transaction data.
     *           Example: request.auth.uid = "user123", path = "/users/user456/transactions/transaction789"
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/transactions/{transactionId} {
      // Allow reads only if the user is signed in and is the owner of the document.
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      // Allow creation only if the user is signed in and the userId matches the authenticated user's ID.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == transactionId;

      // Allow updates only if the user is signed in, is the owner of the document, and the document exists. Enforce immutability of the id field.
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;

      // Allow deletion only if the user is signed in, is the owner of the document, and the document exists.
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/groupSettings document.
     * @path /users/{userId}/groupSettings
     * @allow (create) - Authenticated user creates group settings under their own userId.
     *           Example: request.auth.uid = "user123", path = "/users/user123/groupSettings"
     * @allow (get, list, update, delete) - Authenticated user accesses their own group settings.
     *           Example: request.auth.uid = "user123", path = "/users/user123/groupSettings"
     * @deny (create) - Authenticated user attempts to create group settings under another user's userId.
     *           Example: request.auth.uid = "user123", path = "/users/user456/groupSettings"
     * @deny (get, list, update, delete) - Authenticated user attempts to access another user's group settings.
     *           Example: request.auth.uid = "user123", path = "/users/user456/groupSettings"
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/groupSettings {
      // Allow reads only if the user is signed in and is the owner of the document.
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Group settings are a single document, not a listable collection.

      // Allow creation only if the user is signed in and the userId matches the authenticated user's ID.
      allow create: if isSignedIn() && isOwner(userId);

      // Allow updates only if the user is signed in, is the owner of the document, and the document exists.
      allow update: if isSignedIn() && isExistingOwner(userId);

      // Allow deletion only if the user is signed in, is the owner of the document, and the document exists.
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }
}