rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces that only the owner can manage their members data.
     * @path /users/{userId}/members/{memberId}
     * @allow (create) - User 'user123' creates a new member under their user ID: `request.auth.uid == 'user123'` and `request.resource.data.id == 'user123'`
     * @allow (get, update, delete, list) - User 'user123' reads/modifies/deletes a member under their user ID.
     * @deny (create, update, delete) - User 'user456' attempts to create/modify/delete a member under user 'user123'
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/members/{memberId} {
      // isOwner function checks that the userId in the path matches the authenticated user's ID.
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == memberId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Enforces that only the owner can manage their transactions data.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (create) - User 'user123' creates a new transaction under their user ID: `request.auth.uid == 'user123'`
     * @allow (get, update, delete, list) - User 'user123' reads/modifies/deletes a transaction under their user ID.
     * @deny (create, update, delete) - User 'user456' attempts to create/modify/delete a transaction under user 'user123'
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/transactions/{transactionId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Enforces that only the owner can manage their group settings.
     * @path /users/{userId}/groupSettings
     * @allow (create) - User 'user123' creates group settings under their user ID: `request.auth.uid == 'user123'`
     * @allow (get, update, delete, list) - User 'user123' reads/modifies/deletes group settings under their user ID.
     * @deny (create, update, delete) - User 'user456' attempts to create/modify/delete group settings under user 'user123'
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/groupSettings {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId);
    }
    
    function memberIdFromPath(userId, transactionId) {
        return userId;
    }
  }
}