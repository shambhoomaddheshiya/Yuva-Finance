/**
 * @fileOverview Firestore Security Rules for Sahayak Savings application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user has a private data scope under `/users/{userId}` and can only access data within that scope.
 *
 * Data Structure:
 * - `/users/{userId}/members/{memberId}`: Stores member data, accessible only by the owning user.
 * - `/users/{userId}/transactions/{transactionId}`: Stores transaction data, accessible only by the owning user.
 * - `/users/{userId}/groupSettings`: Stores group settings, accessible only by the owning user.
 *
 * Key Security Decisions:
 * - Users can only manage data within their own `userId` scope.
 * - Listing data across different users is strictly prohibited to satisfy QAPs (Rules are not Filters).
 * - Data consistency is enforced by matching user IDs in paths and document data.
 * - Denormalization: Group settings are duplicated into members and transaction documents to ensure authorization independence and enable atomic operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the requesting user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user is the owner of the resource based on the userId.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the requesting user is the owner of the resource and that the document exists.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /users/{userId}/members/{memberId} collection.
     * @path /users/{userId}/members/{memberId}
     * @allow (create) - Authenticated user 'user123' can create a member with memberId 'member456' under their userId 'user123' if the member document's userId also matches 'user123'.
     * @allow (update) - Authenticated user 'user123' can update a member with memberId 'member456' under their userId 'user123' if they are the owner of the member document.
     * @allow (delete) - Authenticated user 'user123' can delete a member with memberId 'member456' under their userId 'user123' if they are the owner of the member document.
     * @deny (create) - Authenticated user 'user123' cannot create a member under userId 'user456'.
     * @deny (update) - Authenticated user 'user123' cannot update a member under userId 'user456'.
     * @deny (delete) - Authenticated user 'user123' cannot delete a member under userId 'user456'.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, validates relational integrity between documents.
     */
    match /users/{userId}/members/{memberId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == memberId;
      allow update: if isExistingOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/transactions/{transactionId} collection.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (create) - Authenticated user 'user123' can create a transaction with transactionId 'tx456' under their userId 'user123' if the transaction document's memberId also matches 'user123'.
     * @allow (update) - Authenticated user 'user123' can update a transaction with transactionId 'tx456' under their userId 'user123' if they are the owner of the transaction document.
     * @allow (delete) - Authenticated user 'user123' can delete a transaction with transactionId 'tx456' under their userId 'user123' if they are the owner of the transaction document.
     * @deny (create) - Authenticated user 'user123' cannot create a transaction under userId 'user456'.
     * @deny (update) - Authenticated user 'user123' cannot update a transaction under userId 'user456'.
     * @deny (delete) - Authenticated user 'user123' cannot delete a transaction under userId 'user456'.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, validates relational integrity between documents.
     */
    match /users/{userId}/transactions/{transactionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == transactionId;
      allow update: if isExistingOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/groupSettings document.
     * @path /users/{userId}/groupSettings
     * @allow (create) - Authenticated user 'user123' can create group settings under their userId 'user123'.
     * @allow (update) - Authenticated user 'user123' can update group settings under their userId 'user123' if they are the owner of the group settings document.
     * @allow (delete) - Authenticated user 'user123' can delete group settings under their userId 'user123' if they are the owner of the group settings document.
     * @deny (create) - Authenticated user 'user123' cannot create group settings under userId 'user456'.
     * @deny (update) - Authenticated user 'user123' cannot update group settings under userId 'user456'.
     * @deny (delete) - Authenticated user 'user123' cannot delete group settings under userId 'user456'.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/groupSettings {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}