/**
 * @fileOverview Firestore Security Rules for Sahayak Savings application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user has a private data scope under `/users/{userId}`.
 * Only the authenticated user can access their own data.
 *
 * Data Structure:
 * - `/users/{userId}/members/{memberId}`: Stores member data, accessible only by the owning user.
 * - `/users/{userId}/transactions/{transactionId}`: Stores transaction data, accessible only by the owning user.
 * - `/users/{userId}/groupSettings`: Stores group settings, accessible only by the owning user.
 *
 * Key Security Decisions:
 * - User data is segregated by `userId` in the path, enforcing ownership.
 * - List operations are secured by path-based ownership, preventing cross-user listing.
 *
 * Denormalization for Authorization:
 *  N/A - The authorization does not rely on denormalization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user ID matches the resource's user ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner and the document exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && exists(resource.data);
    }

    /**
     * @description
     * - Protects access to user-specific member data.
     * - Enforces that only the authenticated user can manage their own member data.
     * @path /users/{userId}/members/{memberId}
     * @allow (create) User 'user123' can create a member document with memberId 'member456' under their userId 'user123'.
     * @deny (create) User 'userABC' cannot create a member document under userId 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/members/{memberId} {
      // Read rules
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Write rules
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description
     * - Protects access to user-specific transaction data.
     * - Enforces that only the authenticated user can manage their own transaction data.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (create) User 'user123' can create a transaction document with transactionId 'txn789' under their userId 'user123'.
     * @deny (create) User 'userABC' cannot create a transaction document under userId 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/transactions/{transactionId} {
      // Read rules
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Write rules
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description
     * - Protects access to user-specific group settings.
     * - Enforces that only the authenticated user can manage their own group settings.
     * @path /users/{userId}/groupSettings
     * @allow (create) User 'user123' can create group settings under their userId 'user123'.
     * @deny (create) User 'userABC' cannot create group settings under userId 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/groupSettings {
      // Read rules
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Write rules
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}