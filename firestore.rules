/**
 * @fileoverview Firestore Security Rules for Sahayak Savings App
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model where each user can only
 * access data associated with their own user ID. It leverages path-based
 * authorization and data denormalization to ensure secure and efficient access
 * control.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, which ensures that only the
 * authenticated user can manage their own data.
 * - /users/{userId}/members/{memberId}: Stores member data for a specific user.
 * - /users/{userId}/transactions/{transactionId}: Stores transaction data for a
 *   specific user and member.
 * - /users/{userId}/groupSettings: Stores the group settings for a specific
 *   user.
 *
 * Key Security Decisions:
 * - Strict user ownership: All data access is restricted to the owning user,
 *   enforced through path-based rules.
 * - No user listing: Listing all users is not allowed. Only the authenticated
 *   user can access their own data.
 * - Data Denormalization:  Group settings are denormalized into member and
 *   transaction documents for authorization independence and atomic operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requested user ID matches the authenticated user's ID.
     * @param {string} userId - The user ID to check against the authenticated user's ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the requested user ID matches the authenticated user's ID and the resource exists.
     * @param {string} userId - The user ID to check against the authenticated user's ID.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces document ownership for writes.
     * @path /users/{userId}/members/{memberId}
     * @allow (create) User 'user123' can create a new member document under their own user ID.
     * @deny (create) User 'user123' cannot create a member document under a different user ID ('user456').
     * @principle Enforces document ownership for writes
     */
    match /users/{userId}/members/{memberId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == memberId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces document ownership for transactions.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (create) User 'user123' can create a new transaction document under their own user ID.
     * @deny (create) User 'user123' cannot create a transaction document under a different user ID ('user456').
     * @principle Enforces document ownership for writes
     */
    match /users/{userId}/transactions/{transactionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces document ownership for group settings.
     * @path /users/{userId}/groupSettings
     * @allow (create) User 'user123' can create group settings under their own user ID.
     * @deny (create) User 'user123' cannot create group settings under a different user ID ('user456').
     * @principle Enforces document ownership for writes
     */
    match /users/{userId}/groupSettings {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}