/**
 * @fileoverview Firestore Security Rules for Sahayak Savings application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, where each user has exclusive access to their own data.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, including member data, transactions, and group settings. This isolates user data.
 *
 * Key Security Decisions:
 * - User listing is implicitly disallowed by the data structure.
 * - All write operations are protected by ownership checks.
 * - Data for group settings is denormalized into member and transaction documents, allowing for authorization independence.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by the owner (authenticated user).
     * @param {string} userId - The user ID to check against.
     * @returns {boolean} - True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the existing owner (authenticated user) and the resource exists.
     * @param {string} userId - The user ID to check against.
     * @returns {boolean} - True if the user is the owner and resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && exists(resource);
    }

    /**
     * @description Checks if the user is signed in.
     * @returns {boolean} - True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Rules for documents in the /users/{userId}/members/{memberId} collection.
     * @path /users/{userId}/members/{memberId}
     * @allow (create) User 'user123' can create a new member document with memberId also 'user123' under their own userId.
     * @deny (create) User 'user456' cannot create a member document under the /users/{userId} document for 'user123'.
     * @allow (get, list) User 'user123' can read member documents under their own userId.
     * @deny (get, list) User 'user456' cannot read member documents under the /users/{userId} document for 'user123'.
     * @allow (update, delete) User 'user123' can update or delete a member document under their own userId.
     * @deny (update, delete) User 'user456' cannot update or delete member documents under the /users/{userId} document for 'user123'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/members/{memberId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for documents in the /users/{userId}/transactions/{transactionId} collection.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (create) User 'user123' can create a new transaction document with transactionId also 'user123' under their own userId.
     * @deny (create) User 'user456' cannot create a transaction document under the /users/{userId} document for 'user123'.
     * @allow (get, list) User 'user123' can read transaction documents under their own userId.
     * @deny (get, list) User 'user456' cannot read transaction documents under the /users/{userId} document for 'user123'.
     * @allow (update, delete) User 'user123' can update or delete a transaction document under their own userId.
     * @deny (update, delete) User 'user456' cannot update or delete transaction documents under the /users/{userId} document for 'user123'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/transactions/{transactionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/groupSettings document.
     * @path /users/{userId}/groupSettings
     * @allow (create) User 'user123' can create their own group settings document.
     * @deny (create) User 'user456' cannot create group settings document under the /users/{userId} document for 'user123'.
     * @allow (get) User 'user123' can read their own group settings document.
     * @deny (get) User 'user456' cannot read group settings document under the /users/{userId} document for 'user123'.
     * @allow (update, delete) User 'user123' can update or delete their own group settings document.
     * @deny (update, delete) User 'user456' cannot update or delete group settings document under the /users/{userId} document for 'user123'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/groupSettings {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
  }
}